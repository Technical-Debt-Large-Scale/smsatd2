Future work will include convolutional neural networks to train a model to understand diagrams made in PowerPoint or another tool and saved as an image, such as IMEAV [19]. We also plan to include a recommendation system to suggests repayment strategies under certain conditions. Different meta- models for storing ATD should be reviewed. Finally, we will also look into including automatic text extraction methods for audio/video recordings to reduce human interaction.nanThe authors would also like to detect different categories of AS (architectural smells) that could impact different quality attributes, such as performance and security; in this direction, we could identify and compute different ADI index profiles according to the AS's impact on specific quality attributes. Moreover, the authors aim to extend the index or define a new one to consider also the cost to remove the architectural smells ( cost- solving). This could allow developers/maintainers to make a business case (costs vs benefits) and help them to set the order in which they want to remove the AS. Towards the definition of this index oriented to the evaluation of the cost-solving, we are also interested to work on the development of some kind of automatic/semiautomatic refactoring support by studying the different refactoring opportunities of each AS.In future work, we plan to study the process of issue removal to determine which issues are the most costly to remove and generally extend this analysis to a wider range of project domains and sizes.NoThe amount of files choose, as the threshodld, to define the type of hotspot. Similar, to the choice of amount of issues to define the unit of evolution window.Based on the results and findings of this work, we plan to do further research in the following directions. First, we intend to validate the correlation between modularity metrics and ANMCC with Java projects. Second, it will be interesting to define new system-wide modularity metrics or adapt existing modularity metrics defined in other perspectives (e.g., complex networks [14]), and investigate the correlation between the metrics and ATD indicators. We expect that the new modularity metrics can improve the accuracy or take less effort of predicting ANMCC. Third, it is practically valuable to develop plugins to calculate the modularity metrics IPCI and IPGF for IDE tools (e.g., in VS2012 or Eclipse).Future work aims at increasing the precision of these estimations with more precise measures. We have to keep in mind that ATD management is prevalently a risk assessment practice, and until better prediction models have been created to predict the cost of architecture anti-patterns (as confirmed in a recent systematic review [8]), the architects’ decisions are based on gut feeling and estimations based on their subjective experiences [20]. However, structuring such process of decision making by applying the method AnaConDebt, has been proven useful in order to make the decision around ATD refactoring based to concrete factors that are causing the interest to be paid in the future, and therefore it would explicit and increase the architects’ knowledge for making informed decision on the ATD refactoring cases.We plan to evaluate the eficiectiveness of our approach on projects without enough history in our future work. In our future work, we plan to explore more e↵ort proxies, and we are collaborating with an industry project that records actual e↵ort data, and we plan to compare this with our proxy measures of e↵ort.As future work, we plan to fully automate the process and empirically evaluate it via large-scale experimentsNonanIn future experiments, we aim to similarly consider other tools, e.g., the commercial tool CAST, tools that provide dependency analysis and other tools developed in academia, e.g., Hotspot Detector, TamDera. Moreover, we are interested in inspecting other dimensions of archi- tectural debt, as the history of projects, and in analyzing large-scale industrial systems.We plan to replicate the case study in more industrial projects with different sizes and from various domains. We also plan to customize the approach in order to make it suitable for an agile context, with appropriate tool support.Some open issues that require further investigation are: • It remains unclear when is best to conduct a refactoring. The unknown effects of combining the refactoring with uncertainty and urgency suggest further investigation. • We have studied principally the delays that the ATD have on long term development. What needs to be more investigated are the short-term benefits that are gained by the accumulated ATD.Also, the method can be supported by a tool: possible future work is related to the development of support to input the estimation data to be combined with the modularity tool in order to make the estimation more cost efficient.nannanOur future work consists of a longitudinal study wherein we do four things: First, we will track the architectural integrity of this system on a regular basis. That is, we plan to analyze periodic snapshots of SoftServe’s system, to see whether the refactoring is being done correctly, and whether it is eroding over time. Second, we plan to continue to track the frequency of reported defects, and their connection to the files in SS1. Third we plan to continue to track the frequency of changes to the files of SS1. Finally, we plan to track the lines of code committed to fix defects and to make changes. This longitudinal data capture and analysis will allow us to validate the expectations and opinions collected in the present study, and to build better predictive models for SoftServe in the future. We are also in the process of conducting other industrial case studies, to show the repeatability of our methods in different industrial contexts.The next step, already in the authors’ plan, consists of conducting a version of this investigation involving a large sample of respondents from a large set of companies, in order to further strengthen the current case study-specific findings with a broad, quantitative investigation. Another important next step is to analyze the customer-related information used during the prioritization activity in order to understand how they are compared to the ATD effects in order to prioritize ATD refactoring against feature development.Once the prediction technique is fully evaluated, it will be incorporated into a tool to evaluate the capabilities of the approach in a study with subjects in the context of real software projects. Finally, it is expected to include other types of architectural smells [15] in the work.Feature and architectural element slicing. Story slicing in agile development involves determining the simplest thing the user can do that is of value, and how that function cuts across the system. Extensions to the economic model. We account for debt at the time it is paid in rework cost. For prudent and deliberate debt we plan to extend the economic model to account for the future cost of paying back debt Managing debt. This paper’s contribution to the area of technical debt management is its discussion of analysis and visibility of dependencies and their implications for technical debt. Next steps in our research will focus on moving from monitoring to more actively and strategically incorporating technical debt into the architectural design processNoNoIn the future we plan to continue our research on what other ATD items can be found and what other impact measures can be combined together for having the complete picture of ATD and its interest, which would greatly help the decision making of the main stakeholders. We also plan to investigate the reasoning behind the architectural violations, whatever they are intentional or not, and whatever or which the architectural violations benefit the final product. Finally, stakeholders that were part of the early evaluation of the tool said that it would be valuable to see the evolution of the debt. They wanted to see if the tendency is that the debt increases or decreases over time, as well as see what impact planned or potential future changes would have.We plan to investigate the role of code and architectural smells in TD, since they are associated to known solutions, that can speed up their resolution process. We would like also to work on the definition of a new TDI, with a focus on code and architectural debt, and experiment it on a large dataset of projects. In the TDI computation we would like to consider: 1) Code and Architectural smells detection; 2) Code and architecture/design metrics; 3) History of a system, including code changes and lifespan of smells; 4) Identification of problems more critical than others, to weight the collected analysis elements (e.g., metrics, smells, issues) according to their relevance in existing (past) projects.Our study generates a number of avenues for future work. First, it provides a benchmark for future studies that seek to examine the relationship between measures of architecture and the costs associated with maintenance and adaptation. Second, it provides methods for evaluating the technical debt associated with software architecture, which could be verified via future empirical studies across a larger number of contexts and systems. Finally, while we focus only on the costs associated with corrective maintenance, a significant amount of the value from refactoring is likely to come from an increase in developer productivity when responding to new requirements. It is our hope that the methods we describe can provide a springboard for undertaking such enquiries.As future work, we plan to extend our tooling to mine archi- tectural smells directly from Git repositories, thus allowing us to link the current information to code churn and investigate the effects of smells on change rates.Another future investigation is toward a cross validation of the rank- ing of the architectural smells with the data on the bugs reported in the affected components considering also the historic information of the maintenance activities on the smelly components.nanNoThe qualitative data derived from the survey are not based on measured or observed data but on estimations made by the respondents. In future studies, we plan to include physical measurements and observation, to create a stronger reliability of the data. The result of this research may be affected by some threats to validity.NoIn summary, managing TD requires a few investments that are not well known by the practitioners and are difficult to be motivated by a precise cost/benefits ratio. Consequently, without an investment on processes and tools to track TD, it remains difficult to make TD visible. And it is difficult to advocate for refactoring invisible TD. This represents a vicious cycle: companies suffer the negative effects of TD and try to contain it, but at the same time they do not find enough motivations to invest in a more systematic management process. By looking at the motivations for start tracking TD, the results show that organizations do so when they experience the interest of TD: slow feature development, quality issues and performance degradation. However, at such point the interest of the TD is already high and, as explained in our recent papers [6], [10], it is hard to refactor, as the cost has also increased and become too expensive. In conclusion, the only way out the vicious cycle seems to be, for the practitioners, to proactively start tracking TD. However, we do not have evidence yet that such improvement would bring the 25% effort down. This is a long-term study that should be set for future research to conductIn future research, another case study will be conducted in a company of different size and in a different domain to investigate whether the same challenges are present there. Cross analysis between the case studies will provide new insights and help increasing the generalisability of the findings. Based on the results of those case studies, it is planned to develop a framework that provides means for practitioners to identify the presence of challenges posed by requirement volatility and take necessary steps to mitigate the risks.nannanNo architectural tools and metrics were applied, even though most reported challenges and issues like service cutting were related to software architecture. This may indicate the im- portance of Architectural Technical Debt (ATD) management for Microservices. Future work that covers the areas of maintenance, evolution, and technical debt in the context of Microservices should take these findings and industry sentiments into account. In particular, academia can support industry with methods, metrics, or tools that aid macroarchitectural assessment of Microservices or provide a more system-centric view. We perceived tool support for service cutting activities and metrics to evaluate service granularity, coupling, or cohesion as concrete gaps that could save industry a lot of refactoring efforts. Finally, issues in the area of human evolvability factors with Microservices like the handling of hyped technologies as well as coordinating and exchanging knowledge between decentralized teams were described as important by participants.While the plug-in is useful as-is, it was developed as a first step in an ongoing project aimed at applying case-based reasoning to the issue of software product quality. The next step in this project aims to use the described plug-in as part of a research effort to define and validate the aggregation of these metrics as part of a software quality model.The next step in our exploration of TD-principal is to provide individual ratings for the effort to fix each of the 1,200+ violations. These effort ratings will be further adjusted by the number of components involved in fixing the violation and the complexity of each component. This refinement will make the calculation of TD-principal more granular and could provide better in- dicators of components most in need of refactoringNonanIt is necessary to study other aspects of ATD such as measurement, monitoring, priorization, repayment and communication and documentation. The results can be taken into consideration by practitioners when dealing with scalability debt and may be used as starting point to develop the method presented here furher or t resear novel lightweight approaches to manage technical debt related to other key business qualitiesTo generalize our findings, we plan on replicating this study on a broader scale. Looking at SATD comments that can be traced to architectural divergences resulted effective in resolving them, thus, we plan to further investigate this with better architectural recovery and more advanced SATD detection approaches, potentially in an automated manner.The is no a explicit future works, but the authors show that of the participants that reported different treatment, no one mentioned how potential maintainability-related problems with increased technological heterogeneity, decentralization of control, or appropriate service granularity could be addressed. While these topics do not necessarily have to negatively impact maintainability, they still hold the potential to do so, if not executed with some care. Since this is a rather young topic, qualitative interviews with experts in the field of Microservices would most likely be a more effective approach.The author want to do a survey in real world about risk architecture in software industry.nan