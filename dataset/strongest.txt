The authors propose an approuch to identify ATD using documents and models without to get access to source code of the software.nanThe authors defined a set of formulas to represent Architectural Debt Index using java open source projects to validate the ATDI proposed comparing with other TDI like sonarqube.The paper shows 5 (five) types of architecture issued detected in the case study: Unstable Interface, Implicit Cross-module dependency, Unhealth inheritance Hierarchy, clique and Package cycle.The authors conducted a case study in a real IT company to check the benefits of refactoring of software architecture before and after to check the quantitative and qualitative benefits of paydown ATDI. So the study showed that reducing architecture debt has had a positive influence on productivity and quality measures for the company.The authors proposed a model to check how is behavior of software architecture during software evolution using hotspot to define the most important part the software that should be treated with more carefully. Besides, there is an empirical study using Apache ecosystem to validate the proposed model.The authors conducted an experimentation with Opens Source Software witth real data. The findings showed that the modularity metrics IPCI and IPGF can be used to indicate ATD.The authors proposed a method to identify and calculate the principal and interest of ATDI. The case study was conducted in 6 large IT company with real data in real IT projects.The authors proposed a method do identify and measure ATD using the technique DRSapce and architecture debt to generate a HPC Matrix and identify a ranked list of archdebt incluind its cost fo fix them.The practical idea of the study about ATDI approuch hotspot identification in Android application is good.The idea of this technical paper is to show the main features from Sonargraph, which is an important tool to check software architecture validation and important metrics such as cyclomatic complexity, propagation cost, and cyclicity.nanThe study showed tools that analysis software architecture structure and some metrics about this.The authors proposed an approuch to identify and measure ATD itens via architectural decisions during the redesing process. Thus, the ATD can be identified and calculate without to have access to source code of the project. The architects agreed that associating ATD items to concrete impacted change scenarios is helpful to estimate the interest of ATD items.The development team members considered that the scenario-based part of the approach is particularly useful and easy to conduct, since they are familiar with the change scenarios and are even under pressure from delayed change scenarios that are negatively impacted by certain ATD items.The study shows factors that cause accumulation of ATD using an approuch that monitoring a ;Crisis point of ATD Accumulation;. Beside, the study show a taxonomy of the causes for ATD. In addition, the study employed a case study using real data from 5 large Scandinavian Software Companies. The companies adopted Agile Software Developement (ASD) as a Software life-cycle processThe authors done a case study in a large IT company using a large software product in long term with real data. The authors proposed a method to identify ATD focus on files that should be refactored and the methods helps to calculate the estimation effort to fix this ATD. A formula quantifying the refactoring benefits.nannanThe authors proposed an approuch to identify, measure, calculate the ATDI via case study in a large IT company analysing a sequence of versions via Dspace methodThe authors showed a list of important aspects regarding to ATD causes such as Double effort, Big delivers, Code changes, complement tests, quality issues, hidden TD, Wrong estimation, Contagius ATD, Developer idlingThe author proposed a approuch to discover parts the software that has arquitectural smells using code analysis and code smells detection throught the versions of the software. Besides there is a replication kit available on github ( https://github.com/tommantonela/icsa- 2018) to reproduce the study.The authors conducted a case study in a real large anc complex system of natural disaster to evaluate each release regarding ATD and calculate the effort to fix them.The objective of DV8 is to measure software modularity, detect architecture anti-patterns as technical debts, quantify the maintenance cost of each instance of an anti-pattern, and enable return on investment analyses of architectural debts. Different from other tools, DV8 integrates data from both source code and revision historyThe study selected popular open projects that is available; the proposed metrics are simple to calculate; the proposed correlation is easy to understandThe study was performed in a real case industry applicationIt was collected five tools to check TD index about ATD. It was observed how to calculate de TD index and the unit measure.The authors studied a real case for three years and collect data from two large systems about effort and spend the maintenance. The authors analyzed the SVC repository, the bug tracker related to commits, the files changes, and refactoring propagation cust to maintain the systems.The authors studied an evolution process of identifying and tracking architectural smells in corpus qualitas.The authros proposed an index to check the criticality of architectural smell using pagerank. The study used a set of open source software projects to extract data about criticality of architectural smellsnanThere is a lack of study in Security TD. The approuch based in a security catalog widely used in community.This is the first study surveying the estimated magnitude of the interest paid on the accumulated TD in terms of perceived wasted time and effort. The study has shown that software development practitioners estimate that 36 % of all development time is wasted due to TD and that Complex Architectural Design and Requirement TD generates the most negative impact on daily software development work.The study collected real data from a real industry of software embedded using questionaries and interviews about the effort spent on Technical Debt in the embedded system. Thus, the study identified that test TD, code TD, and Architectural TD were highlighted as main kinds of TD, and qualities attributes as functionality, reliability, and performance were the most important in this context.The authors proposed a maturity model (Strategic Adoption Model (SAMTTD)) to control and manage TD. The following steps cover the model: unaware, no tracking, Ad-hoc, Manual, Measured, Institutionalized and Fully automated. The study observed that the practioners that tracking TD wast about 25% of effort on it.The paper showed a case study about the impact of requirements in software architecture.nannanThe authors conducted a study to check the perception of maintanance and evolution of microservices via survey in 10 IT companies from Germany.The authors collected important metrics regard to architectural metrics and complex metrics.The authors created a usefull plugin that take a way good information to manager and devolopers about architectural metrics and complex metrics directy from github repositories. The plugin is available on https://www.scitools.com/support/gui-plugins/ as called UnderstandThe authors performed a study in a real case using a real it company catalog of rules of architectural and code patterns with real systems. The authors proposed a was to calculate the principal of TD in money value.The study have access to a large repository from real cases (160) with varius types of technology. This repository was provided by CAST company.nanDescribe a kind of ATD, more spefically scalability ATD and the authors proposed a lightweight approach to manage scalibity debt. The case study conducted a method to identify, estimate and prioritize scalability debt.The authors recovery the software architecture compoents from ArgoUML analysing the documents and source code. So, it is can be shared with others papersThe authors showed in the study that there is lack research in quality characteristics and Technical Debt in service and micro-service based systems. Besides, the paper shows the perception of practioners about those topics.The author proporse a therorical important architect risk appetite classificationnan