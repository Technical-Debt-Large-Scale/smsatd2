good; due to the authors propose an approuch to identify ATD wihout static code analysis.Great;The paper provides a way to identify and estimate ATD effort in hours using the modularity of componentsGood; the authors defined a set of formulas to represent Architectural Debt Index.Good; the paper shows the files in architecture root and calculate the effort spend to fix the architecture roots using interview of developers.Good; due to this is the first real-world empirical study of architecture debt over a long period of time with the goal of demonstrating the benefit of improving a productâ€™s software architecture by paying down architecture debt (through refactoring). Besites, All of the architecture analyses presented in this paper are fully automated and so they can provide exactly the data needed for such measurement and benchmarkingGreat; due to the authors propose a model - Active Hotspot - that can be used to detect and monitor the emergence and evolution of software degradation by tracking how files and their relations are changed with each issue, such as adding a new feature or fixing a bug.Great; The authors proposed a new ATD index called IPCI (Index of package changing impact) based on modularity metrics that is no necessary to get access to source code log commits. Besides, we consider that the estimation of ATD should be calculated on real data (i.e., source code), and the estimation makes more sense within a relative short term, e.g., between two releases. That is, the estimation of the next release is based on the real data of this implemented release.Great; due to The authors proposed a method to identify and calculate the principal and interest of ATDI. The case study was conducted in 6 large IT company with real data in real IT projects. Besides, the research process was based on Design Science Research.Good; due to the authors showed a method do identify and measure of ATD using a framework applied in a real case using a set of Apache project using analsys of sequence of releasesWeak; The idea of the study about ATDI approuch hotspot identification in Android application is good, but there is no scientific rigor in the paper.Weak; The paper is more technical and describe a tool called sonargraph and its importance to check the software architecture. However, it is not a scientific study.nanGood; due to evaluate architectural debt with tools in a set of real java systems.Great; The authors proposed an approuch to identify and measure (in man-days) ATD itens via architectural decisions during the redesing process. Thus, the ATD can be identified and calculate without to have access to source code of the project.Good;due to the authors proposed a taxonomy of ATD accumatlionGood; due to the study show an approuch to identify the ATD, Monitoring and Calculate the effort to fix it.nannanGreat; due to the authors proposed a methdo to identify, measure and calculate the ATDI using DRSpace based on analysis of a sequency of version from a software in a real case study in a large IT company.Good; due to the authors showed a list of important aspects regarding to ATD causes such as Double effort, Big delivers, Code changes, complement tests, quality issues, hidden TD, Wrong estimation, Contagius ATD, Developer idlingGood; due to show an approuch to identify ATD via architecture smells using code analysis and it is possible to monitore the evolution of version regard to architecture smellsGreat; due to the authors proposed a way to identify ATD during software evolution and calculate the cost of ATD according software architecture components created or edited.Weak; but the tool is useful to check important problems from software architecture such as measure software modularity, detect architecture anti-patern and quantify the maintenance cost.good;Good; In this paper, we present a novel approach for visualizing the debt and the interest together. Such visualization helps the stakeholders identifying and prioritizing ATD, by under- standing the impact of different ATD items (specifically non- allowed dependencies) on efficiency. The validation interviews with the stakeholders at VCG confirmed that such tool would be valuable for architects and other stakeholders. It is important for calculate the performance communication between the components in a automotive domain, but can be used in a network distributed system such as a microservice system.good;good; due to The authors studied a real case for three years and collect data from two large systems about effort and spend the maintenance. The authors analyzed the SVC repository, the bug tracker related to commits, the files changes, and refactoring propagation cust to maintain the systems.good;Good; The authros proposed an index to check the criticality of architectural smell using pagerank.nanGood;Due to the applied approuch to identificy the security TD and there is a formula to calculate the Principal of Security TDGood; due to demonstrate how important is the effort waste with TD (36%) and the study showed that Software Architecture and Requirements are the aspects most important because waste more time to fix TD.Good;due to Architectural Technical Debt's findings as an essential kind of TD that happens in the context of embedded systems.Good; because there is ATD debt recognized in survey like: Dependence violations, Complex architecture desgin, different parterns and policies, dependence to external resource and lack of reusabililite in designWeak; due to the author did not study about how to identify, measure or calculate ATDnannanGood; due to the authors conducted a survey to check the perception of architectural technical debt in micro-services, Despite most reported issues being related to Architectural Technical Debt (ATD), our participants did not apply any architectural or service-oriented tools and metrics. So, it is a good oportunite to study ATD in microservices.Good; due to the metrics grouped by the authrosGood; due to the authors proposed an effetive way to calculate the principal of TD based on catalog of rules to detect the violations of qualities attributes like performance, securtiy, robustness, trasferability and changeabilite. So, those characteristics are so close to architectural technical debt.Regular; due to even calculating the TD cost, there is NO ATD specif costnanGood;due to the authors proposed a method to identify, estimate and prioritize a kind of ATD, more specifically scalability debt.Good;due te the paper show a approuch to identify architectural divergences using Self Admited Technical Debt using comments from source code.Regular; due to the authors highlited that maintanability and evoluation are TD topics with lack studies in services and micro-services based systems.Weak; due to the author did not study about ATDnan