nanTo estimate the effort to fix the ATD is necessary, an evaluation of developers. So, it is necessary for a manual process to evaluate the efort.The data validation should be performed in a real industrial project.Only one project in short time of 9 months.The calculus of cost of ATDI depends on the participation of the developers from each feature and bug analysed on case study.First the accuracy of our study depends on the quality of project revision histories. Second, our definition of active hotspot uses seed files and includes files with propagation relations with them. There may exist more effective ways to find more precise hotspot, e.g. at method-level instead of file-level. Improving and further evaluating the hotspot detection algorithm is future work. Finally, the activeness of a system will significantly influ- ence the detected hotspots.In this case study, only C# OSS projects were selected and used to validate the correlation between modularity metrics and ANMCC. Consequently, the conclusion drawn is only valid for C# projects. There is a need of conducting more studies for the projects written in other object-oriented languages, such as Java.There are some limitations in this study. Most of the effort measures used for calculating the different components are based on the experiences of the experts involved. This might have injected some bias in the study. However, the overall framework and the components that can be used to estimate ATD refactoring are quite generalizable, the indicators have been considered as useful and the decision making process proper. The different metrics that can be used as input needs to be further studied, however they usually depend on the different company. Another limitation is the learning curve: it took a while before the architects would employ the method, but after the sessions, they recognized that the method was very logical and that the process would probably be much shorter as the method was repeated and the tasks of collecting information split among the architects.First, since we have only examined 7 projects and all of these are Apache projects, we can not guarantee that our results will generalize to other projects with di↵erent cultures and organizational policies. Second, our approach has the limitation that it relies on revision history to iden- tify architectural debt. For projects without enough history data, our approach can still identify groups of files with the potential to become architectural debt Third, our approach relies on mining error-prone files from a project’s revision history and bug tracking data. We use the bug report ID that developers enter into commits to locate error-prone files.The study is a short paper with only two pages.There is no data or experimentation about the study.nanThe study should be share the dataset used in evaluation of tools.The process should be automated or seme-autormated using a specific tool to aid the architect. Some users (e.g., new developers) may not be familiar with ADs and ATD items, though the templates provided. The preparation of ADs may take time when the ADs are not documented, especially when the ADs were made a long time ago as the knowledge about ADs tends to vaporize.The graphs in this paper are not meant to represent precise data coming from a measurement system. Therefore the steepness of the curves and the projections might vary in real context. The magnitude for the contribution of each factor is also to be further assessed. However, we offer the recognition of factors that are not necessarily possible to be measured and therefore discovered by quantitative analysis, such as urgency and uncertainty. The results are qualitatively developed through a thorough research process and using a wide amount of qualitative data coming from more than 30 informants from 7 sites and with different roles, which allowed as to compare and test statements among themselves. Furthermore, architecture documentation has been evaluated as well as secondary data. This has allowed us to apply source triangulation [10].It was necessary to do many interviews with developers to get the estimation effort about ATD fix. So, the process to calculate the effort of ATD fix majority manual.nannanThe case study performed only one company in only one system.The most important limitation is the limited sample size of the respondents. However, we aimed at reporting the understanding from a case study, which included both qualitative and quantitative data, rather than surveying a large number of practitioners. Furthermore, as previously explained, we offer a novel understanding of an important and overlooked research subject. The authors aim at collecting such evidence, using an investigation tool improved with the help of the exploratory results obtained from the study presented here.The authro used a tool that analysis only java source code. There is no method to calculate the ATD cost.There is no the list of ATDI for each release. The paper only show the cost estimated for ATD in release, but there is details for each release.The paper has only two pages.There is no ADTM process, there is no how to calculate ATD custSince there is only one studied system, the resulting method- ology is entirely based on such studied case and could there- fore potentially be limited to similarly designed architectures, e.g. where an intended architecture is realized as logical components deployed to ECUs.The study should be created an experimentation using real systems to compare each tool evaluated.The study did not explain the architectural debt used to refactoring in architectural system maintenance. We examine only two systems, albeit with very different designs and from two different firms. We cannot be sure that the findings would apply to other firms or sys- tems.The study evaluates only a few projects in java language from Qualitas Corpus. Maybe it does not apply to the industry or other software languages.The is no asses of effort waste to fix Architectural Smell. Besides, there is no monitoring of archicterual smell through the versions analysednanThe is no validation in a real software system to proof the proposed approuchThe qualitative data derived from the survey are not based on measured or observed data but on estimations made by the respondents.The study did not show how to measure the TD.There is no explanations or details about TD issues used in survey.This study aimed to explore the challenges to SW architecture posed by requirements volatility, but it not concern to identify, measure or calculate the cost of ATD.nannanThe amount of participantes were 17 stakeholders from 10 diferent companies from Germany. Maybe a small number to represent the perception for all companies.There is no ATD index or specific metrics to architectural technical debtThe catalog of rules is private. So, only the CAST company can use this catalog. Besides, the value used to calculate the principal of TD is regarding to context of CAST company, thus, it not possible to generalize this value in other companies.The main tool used is a commercial tool and there is no free licence to get the tool to replicate the study.nanThe approuch to identify, estimate and calculate the scabality architectural issue is manual.The authors conducted only one study to only one product: ArgoUML, so, it not possible to generalize the results to other productsThe survey desig did not show details about the kind of systems and there is no details about the companies that the participants work.There is no data or experimentation about the study. So, this is a theorical study.nan